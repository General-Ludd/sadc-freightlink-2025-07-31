from sqlalchemy import Boolean, Column, Integer, Float, String, ForeignKey, DateTime, Enum, Date, Time
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import ARRAY
from models.base import Base
from datetime import datetime

class Ftl_Load_Board(Base):
    __tablename__ = "ftl_load_board"

    id = Column(Integer, primary_key=True, index=True)
    shipment_id = Column(Integer, nullable=False)
    type = Column(String)
    trip_type = Column(String, nullable=False)
    load_type = Column(String, nullable=False)
    minimum_weight_bracket = Column(Integer, nullable=False)
    minimum_git_cover_amount = Column(Integer, default=0, nullable=True)
    minimum_liability_cover_amount = Column(Integer, default=0, nullable=True)
    shipment_rate = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payment_terms = Column(String, nullable=False)
    payment_date = Column(Date)
    status = Column(Enum("Available", "Assigned"), default="Available")
    required_truck_type = Column(String, nullable=True)
    equipment_type = Column(String, nullable=True)
    trailer_type = Column(String, nullable=True)
    trailer_length = Column(String, nullable=True)
    origin_address = Column(String)
    complete_origin_address = Column(String)
    origin_city_province = Column(String)
    origin_country = Column(String)
    origin_region = Column(String)
    destination_address = Column(String)
    complete_destination_address = Column(String)
    destination_city_province = Column(String)
    destination_country = Column(String)
    destination_region = Column(String)
    route_preview_embed = Column(String)
    pickup_date = Column(Date)
    priority_level = Column(String, nullable=True)
    customer_reference_number = Column(String)
    shipment_weight = Column(Integer)
    commodity = Column(String)
    temperature_control = Column(String)
    hazardous_metarials = Column(String, nullable=False)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(String)
    pickup_notes = Column(String)
    delivery_number = Column(String)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    eta_date = Column(Date)
    eta_window = Column(String)
    pickup_appointment = Column(String)
    pickup_facility_name = Column(String, nullable=True)
    pickup_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    pickup_start_time = Column(Time, nullable=False)
    pickup_end_time = Column(Time, nullable=False)
    pickup_facility_notes = Column(String, nullable=True)
    pickup_first_name = Column(String, nullable=False)
    pickup_last_name = Column(String, nullable=False)
    pickup_phone_number = Column(String, nullable=False)
    pickup_email = Column(String, nullable=False)
    delivery_appointment = Column(String)
    delivery_facility_name = Column(String, nullable=True)
    delivery_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    delivery_start_time = Column(Time, nullable=False)
    delivery_end_time = Column(Time, nullable=False)
    delivery_facility_notes = Column(String, nullable=True)
    delivery_first_name = Column(String, nullable=False)
    delivery_last_name = Column(String, nullable=False)
    delivery_phone_number = Column(String, nullable=False)
    delivery_email = Column(String, nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())

class Power_Load_Board(Base):
    __tablename__ = "power_load_board"

    id = Column(Integer, primary_key=True, index=True)
    shipment_id = Column(Integer, nullable=False)
    type = Column(String) #########update in database
    trip_type = Column(String) #########update in database
    load_type = Column(String) #########update in database
    minimum_weight_bracket = Column(Integer, nullable=False)
    minimum_git_cover_amount = Column(Integer, default=0, nullable=True)
    minimum_liability_cover_amount = Column(Integer, default=0, nullable=True)
    shipment_rate = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payment_terms = Column(String, nullable=False)
    payment_date = Column(Date)
    status = Column(Enum("Available", "Assigned"), default="Available")
    required_truck_type = Column(String, nullable=True)
    axle_configuration = Column(String, nullable=False)
    trailer_make = Column(String, nullable=True)
    trailer_model = Column(String, nullable=True)
    trailer_year = Column(Integer, nullable=True)
    trailer_color = Column(String, nullable=True)
    trailer_equipment_type = Column(String, nullable=True)
    trailer_type = Column(String, nullable=True)
    trailer_length = Column(String, nullable=True)
    origin_address = Column(String)
    complete_origin_address = Column(String)
    origin_city_province = Column(String)
    origin_country = Column(String)
    origin_region = Column(String)
    destination_address = Column(String)
    complete_destination_address = Column(String)
    destination_city_province = Column(String)
    destination_country = Column(String)
    destination_region = Column(String)
    route_preview_embed = Column(String)
    pickup_date = Column(Date)
    priority_level = Column(String, nullable=True)
    customer_reference_number = Column(String)
    shipment_weight = Column(Integer)
    commodity = Column(String)
    temperature_control = Column(String)
    hazardous_materials = Column(Boolean, nullable=False)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(String)
    pickup_notes = Column(String)
    delivery_number = Column(String)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    eta_date = Column(Date)
    eta_window = Column(String)
    pickup_appointment = Column(String)#########update in database
    pickup_facility_name = Column(String, nullable=True)
    pickup_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    pickup_start_time = Column(Time, nullable=False)
    pickup_end_time = Column(Time, nullable=False)
    pickup_facility_notes = Column(String, nullable=True)
    pickup_first_name = Column(String, nullable=False)
    pickup_last_name = Column(String, nullable=False)
    pickup_phone_number = Column(String, nullable=False)
    pickup_email = Column(String, nullable=False)
    delivery_appointment = Column(String)#########update in database
    delivery_facility_name = Column(String, nullable=True)
    delivery_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    delivery_start_time = Column(Time, nullable=False)
    delivery_end_time = Column(Time, nullable=False)
    delivery_facility_notes = Column(String, nullable=True)
    delivery_first_name = Column(String, nullable=False)
    delivery_last_name = Column(String, nullable=False)
    delivery_phone_number = Column(String, nullable=False)
    delivery_email = Column(String, nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())

class Dedicated_lanes_LoadBoard(Base):
    __tablename__ = "dedicated_lanes_loadboard"

    id = Column(Integer, primary_key=True, index=True)
    shipment_id = Column(Integer, nullable=False)
    type = Column(String)
    trip_type = Column(String)
    load_type = Column(String)
    minimum_weight_bracket = Column(Integer, nullable=False)
    minimum_git_cover_amount = Column(Integer, default=0, nullable=True)
    minimum_liability_cover_amount = Column(Integer, default=0, nullable=True)
    contract_rate = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payment_terms = Column(String, nullable=False)
    recurrence_frequency = Column(String)  # How often shipments occur
    recurrence_days = Column(ARRAY(String)) # Days (e.g., "Monday, Wednesday, Friday")
    skip_weekends = Column(Boolean)
    shipments_per_interval = Column(Integer) # Number of shipments in each recurrence interval
    total_shipments = Column(Integer)  # Total number of shipments in the contract
    rate_per_shipment = Column(Integer)
    start_date = Column(Date, nullable=False)  # Start date of the contract
    end_date = Column(Date, nullable=True)  # Optional end date (if known)
    shipment_dates = Column(ARRAY(Date))
    payment_dates = Column(ARRAY(Date))
    status = Column(Enum("Available", "Assigned"), default="Available")
    required_truck_type = Column(String, nullable=False)
    equipment_type = Column(String, nullable=False)
    trailer_type = Column(String, nullable=True)
    trailer_length = Column(String, nullable=True)
    origin_address = Column(String)
    complete_origin_address = Column(String)
    origin_city_province = Column(String)
    origin_country = Column(String)
    origin_region = Column(String)
    destination_address = Column(String)
    complete_destination_address = Column(String)
    destination_city_province = Column(String)
    destination_country = Column(String)
    destination_region = Column(String)
    route_preview_embed = Column(String)
    customer_reference_number = Column(String)
    average_shipment_weight = Column(Integer)
    commodity = Column(String)
    temperature_control = Column(String)
    hazardous_materials = Column(Boolean, nullable=False)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(Integer)
    pickup_notes = Column(String)
    delivery_number = Column(Integer)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    pickup_facility_name = Column(String, nullable=True)
    pickup_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    pickup_start_time = Column(Time, nullable=False)
    pickup_end_time = Column(Time, nullable=False)
    pickup_facility_notes = Column(String, nullable=True)
    pickup_first_name = Column(String, nullable=False)
    pickup_last_name = Column(String, nullable=False)
    pickup_phone_number = Column(String, nullable=False)
    pickup_email = Column(String, nullable=False)
    delivery_facility_name = Column(String, nullable=True)
    delivery_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    delivery_start_time = Column(Time, nullable=False)
    delivery_end_time = Column(Time, nullable=False)
    delivery_facility_notes = Column(String, nullable=True)
    delivery_first_name = Column(String, nullable=False)
    delivery_last_name = Column(String, nullable=False)
    delivery_phone_number = Column(String, nullable=False)
    delivery_email = Column(String, nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())

class Dedicated_Power_lanes_LoadBoard(Base):
    __tablename__ = "dedicated_power_lanes_loadboard"

    id = Column(Integer, primary_key=True, index=True)
    shipment_id = Column(Integer, nullable=False)
    minimum_weight_bracket = Column(Integer, nullable=False)
    contract_price = Column(Integer, nullable=False)
    minimum_git_cover = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payment_date = Column(String, nullable=False)
    recurrence_frequency = Column(String)  # How often shipments occur
    recurrence_days = Column(ARRAY(String)) # Days (e.g., "Monday, Wednesday, Friday")
    skip_weekends = Column(Boolean)
    shipments_per_interval = Column(Integer) # Number of shipments in each recurrence interval
    total_shipments = Column(Integer)  # Total number of shipments in the contract
    price_per_shipment = Column(Integer)
    start_date = Column(Date, nullable=False)  # Start date of the contract
    end_date = Column(Date, nullable=True)  # Optional end date (if known)
    shipment_dates = Column(ARRAY(Date))
    status = Column(Enum("Available", "Assigned"), default="Available")
    required_truck_type = Column(String, nullable=False)
    equipment_type = Column(String, nullable=False)
    trailer_type = Column(String, nullable=True)
    trailer_length = Column(String, nullable=True)
    origin_address = Column(String)
    complete_origin_address = Column(String)
    origin_city_province = Column(String)
    destination_address = Column(String)
    complete_destination_address = Column(String)
    destination_city_province = Column(String)
    route_preview_embed = Column(String)
    customer_reference_number = Column(String)
    shipment_weight = Column(Integer)
    commodity = Column(String)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(Integer)
    pickup_notes = Column(String)
    delivery_number = Column(Integer)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    pickup_facility_name = Column(String, nullable=True)
    pickup_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    pickup_start_time = Column(Time, nullable=False)
    pickup_end_time = Column(Time, nullable=False)
    pickup_facility_notes = Column(String, nullable=True)
    pickup_first_name = Column(String, nullable=False)
    pickup_last_name = Column(String, nullable=False)
    pickup_phone_number = Column(String, nullable=False)
    pickup_email = Column(String, nullable=False)
    delivery_facility_name = Column(String, nullable=True)
    delivery_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    delivery_start_time = Column(Time, nullable=False)
    delivery_end_time = Column(Time, nullable=False)
    delivery_facility_notes = Column(String, nullable=True)
    delivery_first_name = Column(String, nullable=False)
    delivery_last_name = Column(String, nullable=False)
    delivery_phone_number = Column(String, nullable=False)
    delivery_email = Column(String, nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())

class ExchangeLoadBoard(Base):
    __tablename__ = "exchange_loadboard"

    id = Column(Integer, primary_key=True, index=True)
    shipment_id = Column(Integer, nullable=False)
    minimum_weight_bracket = Column(Integer, nullable=False)
    suggested_bid = Column(Integer, nullable=False)
    opening_bid = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payout_method = Column(Integer, nullable=False)
    status = Column(Enum("Assigned", "bidding_open"), default="bidding open")
    required_truck_type = Column(String, nullable=True)
    equipment_type = Column(String, nullable=True)
    trailer_type = Column(String, nullable=True)
    trailer_length = Column(String, nullable=True)
    origin_address = Column(String)
    destination_address = Column(String)
    pickup_date = Column(Date)
    priority_level = Column(String, nullable=True)
    customer_reference_number = Column(String)
    shipment_weight = Column(Integer)
    commodity = Column(String)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(Integer)
    pickup_notes = Column(String)
    delivery_number = Column(Integer)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    exchange_opening = Column(DateTime, nullable=False)
    exchange_closing = Column(DateTime, nullable=False)
    is_bidding_open = Column(Boolean, default=False)
    suggested_price = Column(Integer, nullable=False)
    starting_bid = Column(Integer, nullable=False)
    pickup_facility_name = Column(String, nullable=True)
    pickup_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    pickup_start_time = Column(Time, nullable=False)
    pickup_end_time = Column(Time, nullable=False)
    pickup_facility_notes = Column(String, nullable=True)
    pickup_first_name = Column(String, nullable=False)
    pickup_last_name = Column(String, nullable=False)
    pickup_phone_number = Column(String, nullable=False)
    pickup_email = Column(String, nullable=False)
    delivery_facility_name = Column(String, nullable=True)
    delivery_scheduling_type = Column(String, nullable=False)  # e.g., "First come, First served"
    delivery_start_time = Column(Time, nullable=False)
    delivery_end_time = Column(Time, nullable=False)
    delivery_facility_notes = Column(String, nullable=True)
    delivery_first_name = Column(String, nullable=False)
    delivery_last_name = Column(String, nullable=False)
    delivery_phone_number = Column(String, nullable=False)
    delivery_email = Column(String, nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())