from sqlalchemy import Boolean, Column, Integer, Float, String, ForeignKey, DateTime, Enum, Date, Time
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import ARRAY
from models.base import Base
from datetime import datetime

class Assigned_Spot_Ftl_Shipments(Base):
    __tablename__ = "assigned_ftl_shipments"

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    shipment_id = Column(Integer, nullable=False)
    is_subshipment = Column(Boolean, default=False)
    lane_id = Column(Integer, nullable=True)
    type = Column(String, default="FTL")
    pod_document = Column(String, nullable=True)
    invoice_id = Column(Integer, nullable=True) # Update in database
    invoice_due_date = Column(Date, nullable=True) # Update in database
    invoice_status = Column(String, nullable=True) # Update in database
    trip_type = Column(String)
    load_type = Column(String)
    carrier_id = Column(Integer, nullable=False)
    carrier_name = Column(String, nullable=False)
    vehicle_id = Column(Integer, nullable=True)
    live_location = Column(String)
    driver_id = Column(Integer, nullable=True)
    accepted_for = Column(String)
    accepted_at = Column(String)
    minimum_weight_bracket = Column(Integer, nullable=False)
    minimum_git_cover_amount = Column(Integer, default=0, nullable=True)
    minimum_liability_cover_amount = Column(Integer, default=0, nullable=True)
    shipment_rate = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payment_terms = Column(String, nullable=False)
    status = Column(String, default="Assigned")
    trip_status = Column(String, default="Scheduled")
    required_truck_type = Column(String, nullable=True)
    equipment_type = Column(String, nullable=True)
    trailer_type = Column(String, nullable=True)
    trailer_length = Column(String, nullable=True)
    origin_address = Column(String)
    origin_address_completed = Column(String)
    origin_city_province = Column(String)
    origin_country = Column(String)
    origin_region = Column(String)
    destination_address = Column(String)
    destination_address_completed = Column(String)
    destination_city_province = Column(String)
    destination_country = Column(String)
    destination_region = Column(String)
    route_preview_embed = Column(String, nullable=True)
    pickup_date = Column(Date)
    priority_level = Column(String, nullable=True)
    customer_reference_number = Column(String)
    shipment_weight = Column(Integer)
    commodity = Column(String)
    temperature_control = Column(String)
    hazardous_materials = Column(String, nullable=False)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(String)
    pickup_notes = Column(String)
    delivery_number = Column(String)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    pickup_facility_id = Column(Integer)
    pickup_facility_rating = Column(Float, default=0.0, nullable=True)
    delivery_facility_id = Column(Integer)
    delivery_facility_rating = Column(Float, default=0.0, nullable=True)
    eta_window = Column(String, nullable=True)
    eta_date = Column(Date, nullable=True)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())


class Assigned_Power_Shipments(Base):
    __tablename__ = "assigned_power_shipments"

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    shipment_id = Column(Integer, nullable=False)
    is_subshipment = Column(Boolean, default=False)
    lane_id = Column(Integer, nullable=True)
    pod_document = Column(String, nullable=True)
    invoice_id = Column(Integer, nullable=True) # Update in database
    invoice_due_date = Column(Date, nullable=True) # Update in database
    invoice_status = Column(String, nullable=True) # Update in database
    type = Column(String, default="POWER")
    trip_type = Column(String)
    load_type = Column(String)
    carrier_id = Column(Integer, nullable=False)
    carrier_name = Column(String, nullable=False)
    vehicle_id = Column(Integer, nullable=True)
    trailer_id = Column(Integer)
    driver_id = Column(Integer, nullable=True)
    accepted_for = Column(String)
    accepted_at = Column(String)
    minimum_weight_bracket = Column(Integer, nullable=False)
    minimum_git_cover_amount = Column(Integer, default=0, nullable=True)
    minimum_liability_cover_amount = Column(Integer, default=0, nullable=True)
    shipment_rate = Column(Integer, nullable=False)
    distance = Column(Integer, nullable=False)
    rate_per_km = Column(Integer, nullable=False)
    rate_per_ton = Column(Integer, nullable=False)
    payment_terms = Column(Integer, nullable=False)
    status = Column(Enum("Assigned", "In-Progress", "Completed"), default="Assigned")
    trip_status = Column(Enum("Scheduled", "Carrier En-route to pickup", " Carrier at pickup facility", "Loading",
                              "Carrier in transit", "Carrier at delivery", "Off-loading", "Completed", "Cancelled"), default="Scheduled")
    required_truck_type = Column(String, nullable=True)
    axle_configuration = Column(String, nullable=True)
    origin_address = Column(String)
    origin_address_completed = Column(String)
    origin_city_province = Column(String)
    origin_country = Column(String)
    origin_region = Column(String)
    pickup_appointment = Column(String)
    destination_address = Column(String)
    destination_address_completed = Column(String)
    destination_city_province = Column(String)
    destination_country = Column(String)
    destination_region = Column(String)
    delivery_appointment = Column(String)
    route_preview_embed = Column(String, nullable=True)
    pickup_date = Column(Date)
    priority_level = Column(String, nullable=True)
    customer_reference_number = Column(String)
    shipment_weight = Column(Integer)
    commodity = Column(String)
    temperature_control = Column(String)
    hazardous_materials = Column(String, nullable=False)
    packaging_quantity = Column(String)
    packaging_type = Column(String)
    pickup_number = Column(String)
    pickup_notes = Column(String)
    delivery_number = Column(String)
    delivery_notes = Column(String)
    estimated_transit_time = Column(String)
    is_trailer_loaded = Column(Boolean)
    pickup_facility_id = Column(Integer)
    pickup_facility_rating = Column(Float, default=0.0, nullable=True)
    delivery_facility_id = Column(Integer)
    delivery_facility_rating = Column(Float, default=0.0, nullable=True)
    eta_window = Column(String, nullable=True)
    eta_date = Column(Date, nullable=True)
    created_at = Column(DateTime, nullable=False, server_default=func.now())
    updated_at = Column(DateTime, nullable=True, onupdate=func.now())